name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.2.0'
  EXPO_GO_VERSION: '5.4.8'

jobs:
  # Lint and Type Check
  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run TypeScript type check
      run: npm run type-check

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      env:
        CI: true
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unit
        name: codecov-unit
        fail_ci_if_error: false

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run integration tests
      run: npm run test:integration
      env:
        CI: true

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: macos-latest
    needs: lint-and-type-check
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Detox
      run: npm install detox-cli --global
      
    - name: Build Detox app
      run: npm run build:e2e
      
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CI: true

  # Build and Deploy to Expo
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, unit-tests, integration-tests]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Expo CLI
      run: npm install -g @expo/cli
      
    - name: Login to Expo
      run: expo login -u ${{ secrets.EXPO_USERNAME }} -p ${{ secrets.EXPO_PASSWORD }}
      env:
        EXPO_USERNAME: ${{ secrets.EXPO_USERNAME }}
        EXPO_PASSWORD: ${{ secrets.EXPO_PASSWORD }}
        
    - name: Build for development
      run: expo build:ios -d --no-publish
      env:
        EXPO_ANDROID_KEYSTORE_PASSWORD: ${{ secrets.EXPO_ANDROID_KEYSTORE_PASSWORD }}
        EXPO_ANDROID_KEY_PASSWORD: ${{ secrets.EXPO_ANDROID_KEY_PASSWORD }}
        EXPO_ANDROID_KEY_ALIAS: ${{ secrets.EXPO_ANDROID_KEY_ALIAS }}
        EXPO_ANDROID_KEY: ${{ secrets.EXPO_ANDROID_KEY }}
        
    - name: Deploy to Expo
      run: expo publish --release-channel development
      env:
        EXPO_ANDROID_KEYSTORE_PASSWORD: ${{ secrets.EXPO_ANDROID_KEYSTORE_PASSWORD }}
        EXPO_ANDROID_KEY_PASSWORD: ${{ secrets.EXPO_ANDROID_KEY_PASSWORD }}
        EXPO_ANDROID_KEY_ALIAS: ${{ secrets.EXPO_ANDROID_KEY_ALIAS }}
        EXPO_ANDROID_KEY: ${{ secrets.EXPO_ANDROID_KEY }}

  # Production Build
  production-build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, unit-tests, integration-tests]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Expo CLI
      run: npm install -g @expo/cli
      
    - name: Login to Expo
      run: expo login -u ${{ secrets.EXPO_USERNAME }} -p ${{ secrets.EXPO_PASSWORD }}
      env:
        EXPO_USERNAME: ${{ secrets.EXPO_USERNAME }}
        EXPO_PASSWORD: ${{ secrets.EXPO_PASSWORD }}
        
    - name: Build for production
      run: expo build:ios -p --no-publish
      env:
        EXPO_ANDROID_KEYSTORE_PASSWORD: ${{ secrets.EXPO_ANDROID_KEYSTORE_PASSWORD }}
        EXPO_ANDROID_KEY_PASSWORD: ${{ secrets.EXPO_ANDROID_KEY_PASSWORD }}
        EXPO_ANDROID_KEY_ALIAS: ${{ secrets.EXPO_ANDROID_KEY_ALIAS }}
        EXPO_ANDROID_KEY: ${{ secrets.EXPO_ANDROID_KEY }}
        
    - name: Deploy to Expo
      run: expo publish --release-channel production
      env:
        EXPO_ANDROID_KEYSTORE_PASSWORD: ${{ secrets.EXPO_ANDROID_KEYSTORE_PASSWORD }}
        EXPO_ANDROID_KEY_PASSWORD: ${{ secrets.EXPO_ANDROID_KEY_PASSWORD }}
        EXPO_ANDROID_KEY_ALIAS: ${{ secrets.EXPO_ANDROID_KEY_ALIAS }}
        EXPO_ANDROID_KEY: ${{ secrets.EXPO_ANDROID_KEY }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: production-build
        path: |
          dist/
          *.apk
          *.ipa
          *.aab

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        command: test

  # Performance Budget Check
  performance-budget:
    name: Performance Budget
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build app
      run: npm run build
      
    - name: Check bundle size
      run: |
        BUNDLE_SIZE=$(du -b dist/main.js | cut -f1)
        MAX_SIZE=$((1024 * 1024 * 10)) # 10MB
        
        if [ "$BUNDLE_SIZE" -gt "$MAX_SIZE" ]; then
          echo "Bundle size ($BUNDLE_SIZE bytes) exceeds budget ($MAX_SIZE bytes)"
          exit 1
        else
          echo "Bundle size ($BUNDLE_SIZE bytes) is within budget"
        fi